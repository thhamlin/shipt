-- (1)		
WITH a AS	   				
(SELECT person, count(1) c	
 FROM (SELECT person_1 person, person_2 conn 
       FROM connections
       UNION ALL
       SELECT person_2 person, person_1 conn 
       FROM connections
       )
 GROUP BY person 
)
SELECT person FROM a WHERE c = (SELECT max(c) FROM a)



--(2)  				
WITH a AS	   				
(SELECT person, count(1) c	
 FROM (SELECT person_1 person, person_2 conn FROM connections
	UNION ALL
	SELECT person_2 person, person_1 conn FROM connections
	)
 WHERE conn = 'Malia Obama'
 GROUP BY person 
 )
SELECT person FROM a WHERE c = (SELECT max(c) FROM a)



				
--(3)
WITH a AS	
       (SELECT  person_1 person, person_2 conn FROM connections
	UNION ALL
	SELECT  person_2 person, person_1 conn FROM connections
	), 
x as(SELECT  a.person p1, b.person  p2, count(1) c
     FROM a JOIN a b ON a.conn = b.conn 
               	    AND a.person != b.person
     GROUP BY a.person, b.person
     ORDER BY c DESC)
SELECT p1 Person1, p2 Person2, c Number_Of_Common_Connections 
FROM x JOIN connections z ON x.p1 = z.PERSON_1 AND x.p2 = z.PERSON_2
ORDER BY c DESC


(4, 5) I beleive SQL can handle millions of rows in this scenario. The structures may need to change and
some database platforms handle it better than others (such as the column-store databases).  They need
 to be tuned for the specific purposes. The hardware needs to be appropriate as well. For example, a 
multi-node hadoop cluster can run a Hive query in parallel and retrieve the data much faster. The way the 
data is stored is important as well if the data is partitioned. R may be a better solution in this particular 
case, but would require some testing.

(6) 
# getgitrep.py
# Tracy Hamlin
# 03/22/18
# Pull a repository from git

import git
import sys
import os
import shutil
from git import Repo

shutil.rmtree(r'C:\Users\HamlinT\here')

repo_to_pull = 'https://github.com/vinay-shipt/de-take-home'
dir_to_put = r'C:\Users\HamlinT\here'

Repo.clone_from(repo_to_pull,dir_to_put)

list_files = os.listdir(r'C:\Users\HamlinT\here')
print(list_files,'\n')
